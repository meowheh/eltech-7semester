/*Задание: Написать программу, которая в качестве параметров принимает
имена трех текстовых файлов (2 входных и 1 выходной). Программа должна
открыть канал и выходной файл, а затем породить двух потомков, которым
передаются дескриптор канала для записи и имя входного файла. Каждый
потомок выполняет свою программу, читая построчно текст из входного
файла и записывая его в канал. Программа параллельно посимвольно читает
данные из канала и записывает их в выходной файл, до тех пор пока оба
потомка не закончат свою работу и канал будет пуст.*/

#include <sys/wait.h>
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

// argv[1] - имя первого файла, argv[2] - второго файла, argv[3] - выходного файла
int main(int argc, char* argv[]) {
    
    FILE* file = NULL;              //выходной файл
    // fd[0] - чтение из канала, fd[1] - запись в канал
    int fd[2]; 
    pid_t pid_1, pid_2;
    char ch;

    assert(argc == 4);

   //открываем канал
    if (pipe(fd) == -1) {
        perror("open pipe");
        exit(EXIT_FAILURE);
    }
    //открываем файл для записи
    if ((file = fopen(argv[3], "w")) == NULL) {
        perror("open file");
        exit(EXIT_FAILURE);
    }
    //создаем первого процесс-потомка
    if (!(pid_1 = fork())) {
        //закрываем канал для чтения
        close(fd[0]);
        //запускаем подпрограмму потомка с передачей дескриптора канала для записи и имени его файла
        execl("childExec", "childExec", &fd[1], argv[1], NULL);
    } 
    //создаем второго процесс-потомка
    else if (!(pid_2 = fork())) {
            //закрываем канал для чтения
            close(fd[0]);
            //запускаем подпрограмму потомка с передачей дескриптора канала для записи и имени его файла
            execl("childExec", "childExec", &fd[1], argv[2], NULL);
    }
    
    // Закрытие канала на запись 
    close(fd[1]);

    // Цикл чтения символов из канала и записи их в файл
    while (read(fd[0], &ch, 1) > 0) {
        fputc(ch, file);
    }
    
    // Ожидание завершения работы потомков 
    wait(&pid_1);
    wait(&pid_2);
    //закрываем каналы и файл
    close(fd[0]);
    close(fd[1]);
    fclose(file);
    
}